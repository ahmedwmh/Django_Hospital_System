from django.contrib import admin
from django.utils.translation import gettext_lazy as _
from django.utils.html import format_html
from .models import Report


class ReportListFilter(admin.SimpleListFilter):
    title = _('حالة التقرير')
    parameter_name = 'report_status'

    def lookups(self, request, model_admin):
        return (
            ('pending', _('معلق')),
            ('processing', _('قيد المعالجة')),
            ('completed', _('مكتمل')),
            ('failed', _('فشل')),
            ('recent', _('حديث (آخر 7 أيام)')),
        )

    def queryset(self, request, queryset):
        from django.utils import timezone
        from datetime import timedelta
        if self.value() == 'pending':
            return queryset.filter(status='PENDING')
        if self.value() == 'processing':
            return queryset.filter(status='PROCESSING')
        if self.value() == 'completed':
            return queryset.filter(status='COMPLETED')
        if self.value() == 'failed':
            return queryset.filter(status='FAILED')
        if self.value() == 'recent':
            return queryset.filter(created_at__gte=timezone.now() - timedelta(days=7))


@admin.register(Report)
class ReportAdmin(admin.ModelAdmin):
    list_display = ('get_report_name', 'report_type', 'format', 'status', 'get_generated_by', 'created_at', 'completed_at')
    list_filter = (ReportListFilter, 'report_type', 'format', 'status', 'created_at')
    search_fields = ('name', 'generated_by__first_name', 'generated_by__last_name', 'report_type')
    ordering = ('-created_at',)
    readonly_fields = ('created_at', 'completed_at', 'file_path')
    list_per_page = 25
    list_max_show_all = 100
    date_hierarchy = 'created_at'
    preserve_filters = True
    change_list_template = 'admin/change_list_universal.html'
    change_form_template = 'admin/change_form_universal.html'
    
    def get_report_name(self, obj):
        """Display report name with styling"""
        return format_html(
            '<span style="color: #1f2937; font-weight: 600;">{}</span>',
            obj.name
        )
    get_report_name.short_description = _('اسم التقرير')
    
    def get_generated_by(self, obj):
        """Display generated by with styling"""
        if obj.generated_by:
            name = f"{obj.generated_by.first_name} {obj.generated_by.last_name}"
            return format_html(
                '<span style="color: #1f2937; font-weight: 600;">{}</span>',
                name
            )
        return '-'
    get_generated_by.short_description = _('تم إنشاؤه بواسطة')
    
    fieldsets = (
        (_('معلومات التقرير'), {
            'fields': ('name', 'report_type', 'format', 'status')
        }),
        (_('المعاملات'), {
            'fields': ('parameters',)
        }),
        (_('الملف'), {
            'fields': ('file_path',)
        }),
        (_('المعلومات الإضافية'), {
            'fields': ('generated_by', 'created_at', 'completed_at'),
            'classes': ('collapse',)
        }),
    )
    
    def get_form(self, request, obj=None, **kwargs):
        """Customize the form to auto-select current user"""
        form = super().get_form(request, obj, **kwargs)
        
        # If creating a new report, set the current user as default
        if not obj:  # This is a new report
            form.base_fields['generated_by'].initial = request.user
            form.base_fields['generated_by'].widget.can_add_related = False
            form.base_fields['generated_by'].widget.can_change_related = False
            form.base_fields['generated_by'].widget.can_delete_related = False
        
        return form
    
    def save_model(self, request, obj, form, change):
        """Automatically set the current user when saving"""
        if not change:  # This is a new report
            obj.generated_by = request.user
        super().save_model(request, obj, form, change)
    
    def get_queryset(self, request):
        """Filter reports based on user role"""
        qs = super().get_queryset(request)
        
        # If user is not admin, only show their own reports
        if request.user.role != 'ADMIN':
            qs = qs.filter(generated_by=request.user)
        
        return qs
